{"version":3,"sources":["components/footer.scss","tools/neat/neat/mixins/_grid-column.scss","tools/neat/neat/functions/_neat-float-direction.scss","settings/grid-settings.scss","tools/neat/neat/mixins/_grid-media.scss","components/header.scss"],"names":[],"mappings":"AAAA,aACE,iBAAmB,IADrB,mCCmCE,MAAO,6BACP,MCpBuB,KDqBvB,YEjCQ,KCwDR,0CJ5DF,mCAOM,iBAAmB,OIqDvB,yCJ5DF,mCAWM,iBAAmB,MKXzB,aACE,iBAAmB","file":"style.min.css","sourcesContent":["#site-footer {\r\n  background-color : red;\r\n\r\n  div:not(.u-container) {\r\n    @include grid-column(4);\r\n\r\n    @include grid-media($tablet) {\r\n      background-color : green;\r\n    }\r\n\r\n    @include grid-media($mobile) {\r\n      background-color : blue;\r\n    }\r\n  }\r\n}\r\n","@charset \"UTF-8\";\r\n/// Creates a grid column of requested size.\r\n///\r\n/// @group features\r\n///\r\n/// @name Grid column\r\n///\r\n/// @argument {number (unitless)} $columns [null]\r\n///   Specifies the number of columns an element should span based on the total\r\n///   columns of the grid.\r\n///\r\n///   This can also be defined in a shorthand syntaxt which also contains the\r\n///   total column count such as `3 of 5`.\r\n///\r\n/// @argument {map} $grid [$neat-grid]\r\n///   The grid to be used to generate the column.\r\n///   By default, the global `$neat-grid` will be used.\r\n///\r\n/// @example scss\r\n///   .element {\r\n///     @include grid-column(3);\r\n///   }\r\n///\r\n/// @example css\r\n///   .element {\r\n///     width: calc(25% - 25px);\r\n///     float: left;\r\n///     margin-left: 20px;\r\n///   }\r\n\r\n@mixin grid-column($columns: null, $grid: $neat-grid) {\r\n  $columns: _neat-column-default($grid, $columns);\r\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\r\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\r\n\r\n  width: calc(#{_neat-column-width($grid, $columns)});\r\n  float: _neat-float-direction($grid);\r\n  margin-#{_neat-float-direction($grid)}: $_grid-gutter;\r\n}\r\n","@charset \"UTF-8\";\r\n/// Return the float direction of the grid.\r\n///\r\n/// @argument {map} $grid\r\n///\r\n/// @return {string}\r\n///\r\n/// @example scss\r\n///   _neat-float-direction($neat-grid)\r\n///\r\n/// @access private\r\n\r\n@function _neat-float-direction($grid) {\r\n  $_direction: _retrieve-neat-setting($grid, direction);\r\n  $_float-direction: null;\r\n  @if $_direction == \"ltr\" {\r\n      $_float-direction: left;\r\n  } @else if $_direction == \"rtl\" {\r\n    $_float-direction: right;\r\n  }\r\n  @return $_float-direction;\r\n}\r\n","// Baseline\r\n$baseline-spacing : 8px;\r\n\r\n// Grid settings\r\n$gutter : 32px;\r\n$grid-columns : 12;\r\n$max-width : 1280px;\r\n$outer-padding : $baseline-spacing * 2;\r\n\r\n$neat-grid : (\r\n\t\tcolumns: $grid-columns,\r\n\t\tgutter: $gutter,\r\n);\r\n\r\n$desktop : (\r\n\t\tcolumns: 12,\r\n\t\tgutter: $gutter,\r\n\t\tmedia: 1018px,\r\n);\r\n\r\n$tablet : (\r\n\t\tcolumns: 6,\r\n\t\tgutter: $gutter,\r\n\t\tmedia: 'only screen and (max-width: 1017px)',\r\n);\r\n\r\n$mobile : (\r\n\t\tcolumns: 4,\r\n\t\tgutter: $gutter,\r\n\t\tmedia: 'only screen and (max-width: 767px)',\r\n);\r\n","@charset \"UTF-8\";\r\n/// `grid-media` allows you to change your layout based on a media query.\r\n/// For example, an object can span 3 columns on small screens and 6 columns\r\n/// on large screens.\r\n///\r\n/// You can take this a step further and set different grid attributes like\r\n/// gutter size and total column count for each media query. So, for example,\r\n/// you can have a `1rem` gutter on small screens, and a `2rem` gutter on large\r\n/// screens.\r\n///\r\n/// @group features\r\n///\r\n/// @name Grid media\r\n///\r\n/// @argument {map} $grid\r\n///   The grid to be used within the scope of the block.\r\n///   This grid should include the `media` property to determine the expression\r\n///   for the media query.\r\n///\r\n/// @content\r\n///   Grid media will temporarily the override the default grid with the\r\n///   attributes of the custom grid. This change is scoped to within the mixin\r\n///   block, and once the mixin has ended the default grid will revert to its\r\n///   original state as defined by `$neat-grid`. This allows for different\r\n///   gutter width and column count based on screen size or other properties.\r\n///\r\n/// @example scss\r\n///   $custom-neat-grid: (\r\n///     columns: 12,\r\n///     gutter: 50px,\r\n///     media: 1000px,\r\n///   );\r\n///\r\n///   .element {\r\n///     @include grid-column(3);\r\n///\r\n///     @include grid-media($custom-neat-grid){\r\n///       @include grid-column(6);\r\n///     }\r\n///   }\r\n///\r\n/// @example css\r\n///   .element {\r\n///     width: calc(25% - 25px);\r\n///     float: left;\r\n///     margin-left: 20px;\r\n///   }\r\n///\r\n///   @media only screen and (min-width: 1000px) {\r\n///     .element {\r\n///       width: calc(50% - 75px);\r\n///       float: left;\r\n///       margin-left: 50px;\r\n///     }\r\n///   }\r\n\r\n@mixin grid-media($grid) {\r\n  $_media: _retrieve-neat-setting($grid, media);\r\n  $_query: _neat-parse-media($_media);\r\n\r\n  @media #{$_query} {\r\n    $_default-neat-grid: $neat-grid;\r\n    $neat-grid: map-merge($neat-grid, $grid) !global;\r\n    @content;\r\n    $neat-grid: $_default-neat-grid !global;\r\n  }\r\n}\r\n","#site-header {\r\n  background-color : orange !important;\r\n}\r\n"]}
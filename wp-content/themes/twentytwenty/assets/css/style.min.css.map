{"version":3,"sources":["components/footer.scss","tools/neat/neat/mixins/_grid-column.scss","tools/neat/neat/functions/_neat-float-direction.scss","settings/grid-settings.scss","tools/neat/neat/mixins/_grid-media.scss","components/header.scss"],"names":[],"mappings":"AAAA,aACE,iBAAmB,IADrB,mCCmCE,MAAO,6BACP,MCpBuB,KDqBvB,YEjCQ,KCwDR,0CJ5DF,mCAOM,iBAAmB,OIqDvB,yCJ5DF,mCAWM,iBAAmB,MKXzB,aACE,iBAAmB","file":"style.min.css","sourcesContent":["#site-footer {\n  background-color : red;\n\n  div:not(.u-container) {\n    @include grid-column(4);\n\n    @include grid-media($tablet) {\n      background-color : green;\n    }\n\n    @include grid-media($mobile) {\n      background-color : blue;\n    }\n  }\n}\n","@charset \"UTF-8\";\n/// Creates a grid column of requested size.\n///\n/// @group features\n///\n/// @name Grid column\n///\n/// @argument {number (unitless)} $columns [null]\n///   Specifies the number of columns an element should span based on the total\n///   columns of the grid.\n///\n///   This can also be defined in a shorthand syntaxt which also contains the\n///   total column count such as `3 of 5`.\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to generate the column.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-column(3);\n///   }\n///\n/// @example css\n///   .element {\n///     width: calc(25% - 25px);\n///     float: left;\n///     margin-left: 20px;\n///   }\n\n@mixin grid-column($columns: null, $grid: $neat-grid) {\n  $columns: _neat-column-default($grid, $columns);\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  width: calc(#{_neat-column-width($grid, $columns)});\n  float: _neat-float-direction($grid);\n  margin-#{_neat-float-direction($grid)}: $_grid-gutter;\n}\n","@charset \"UTF-8\";\n/// Return the float direction of the grid.\n///\n/// @argument {map} $grid\n///\n/// @return {string}\n///\n/// @example scss\n///   _neat-float-direction($neat-grid)\n///\n/// @access private\n\n@function _neat-float-direction($grid) {\n  $_direction: _retrieve-neat-setting($grid, direction);\n  $_float-direction: null;\n  @if $_direction == \"ltr\" {\n      $_float-direction: left;\n  } @else if $_direction == \"rtl\" {\n    $_float-direction: right;\n  }\n  @return $_float-direction;\n}\n","// Baseline\n$baseline-spacing : 8px;\n\n// Grid settings\n$gutter : 32px;\n$grid-columns : 12;\n$max-width : 1280px;\n$outer-padding : $baseline-spacing * 2;\n\n$neat-grid : (\n\t\tcolumns: $grid-columns,\n\t\tgutter: $gutter,\n);\n\n$desktop : (\n\t\tcolumns: 12,\n\t\tgutter: $gutter,\n\t\tmedia: 1018px,\n);\n\n$tablet : (\n\t\tcolumns: 6,\n\t\tgutter: $gutter,\n\t\tmedia: 'only screen and (max-width: 1017px)',\n);\n\n$mobile : (\n\t\tcolumns: 4,\n\t\tgutter: $gutter,\n\t\tmedia: 'only screen and (max-width: 767px)',\n);\n","@charset \"UTF-8\";\n/// `grid-media` allows you to change your layout based on a media query.\n/// For example, an object can span 3 columns on small screens and 6 columns\n/// on large screens.\n///\n/// You can take this a step further and set different grid attributes like\n/// gutter size and total column count for each media query. So, for example,\n/// you can have a `1rem` gutter on small screens, and a `2rem` gutter on large\n/// screens.\n///\n/// @group features\n///\n/// @name Grid media\n///\n/// @argument {map} $grid\n///   The grid to be used within the scope of the block.\n///   This grid should include the `media` property to determine the expression\n///   for the media query.\n///\n/// @content\n///   Grid media will temporarily the override the default grid with the\n///   attributes of the custom grid. This change is scoped to within the mixin\n///   block, and once the mixin has ended the default grid will revert to its\n///   original state as defined by `$neat-grid`. This allows for different\n///   gutter width and column count based on screen size or other properties.\n///\n/// @example scss\n///   $custom-neat-grid: (\n///     columns: 12,\n///     gutter: 50px,\n///     media: 1000px,\n///   );\n///\n///   .element {\n///     @include grid-column(3);\n///\n///     @include grid-media($custom-neat-grid){\n///       @include grid-column(6);\n///     }\n///   }\n///\n/// @example css\n///   .element {\n///     width: calc(25% - 25px);\n///     float: left;\n///     margin-left: 20px;\n///   }\n///\n///   @media only screen and (min-width: 1000px) {\n///     .element {\n///       width: calc(50% - 75px);\n///       float: left;\n///       margin-left: 50px;\n///     }\n///   }\n\n@mixin grid-media($grid) {\n  $_media: _retrieve-neat-setting($grid, media);\n  $_query: _neat-parse-media($_media);\n\n  @media #{$_query} {\n    $_default-neat-grid: $neat-grid;\n    $neat-grid: map-merge($neat-grid, $grid) !global;\n    @content;\n    $neat-grid: $_default-neat-grid !global;\n  }\n}\n","#site-header {\n  background-color : blue !important;\n}\n"]}